openapi: 3.0.3
info:
  title: WASAText
  # TO DO: CHANGE THE DESCRIPTION
  description: |-
    This OpenAPI document describes the application of a software which allows people to stay in touch with other users of the system.
    With the inspiration of `WhatsApp`, this app goals is to create an
    open-source one with less security in it
  version: "1"
  contact:
    name: Diego Antonio Guzman Aguirre
    email: guzmanaguirre.2006301@studenti.uniroma1.it
    url: https://github.com/guizzyy

tags:
  - name: "login"
    description: tag for login session operation
  - name: "user profile"
    description: tag for user profile settings
  - name: "chats"
    description: tag for chats operations
  - name: "groups"
    description: tag for group management
  - name: "user action"
    description: tag for user actions

security:
  - bearerAuth: []

paths:

  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '201':
          description: User creation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400': {$ref: '#/components/responses/BadRequest'}
        '500': {$ref: '#/components/responses/InternalServerError'}


  /users/{uID}/username:
    parameters:
      - $ref: '#/components/parameters/UserID'

    put:
      tags: ["user profile"]
      summary: set a new username
      description: |
        Allows the user to set a new username for his account
      operationId: setMyUserName
      requestBody:
        description: the new username
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Username updated correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        '400': {$ref: '#/components/responses/BadRequest'}
        '401': {$ref: '#/components/responses/Unauthorized'}
        '404': {$ref: '#/components/responses/NotFound'}
        '500': {$ref: '#/components/responses/InternalServerError'}

  /users/{uID}/photo:
    parameters:
      - $ref: '#/components/parameters/UserID'

    put:
      tags: ["user profile"]
      summary: set a new photo
      description: |
        Allows the user to set a new photo for his account
      operationId: setMyPhoto
      requestBody:
        description: the new photo
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Photo'
        required: true
      responses:
        '200':
          description: new photo updated correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        '400': {$ref: '#/components/responses/BadRequest'}
        '401': {$ref: '#/components/responses/Unauthorized'}
        '404': {$ref: '#/components/responses/NotFound'}
        '500': {$ref: '#/components/responses/InternalServerError'}

  /users/{uID}/search:
    parameters:
      - $ref: '#/components/parameters/UserID'

    get:
      tags: ["user action"]
      summary: search users by their username
      description: |
        Get a list of all possible users with names that match
        with the written username in the query
      operationId: searchUsers
      parameters:
        - name: username
          in: query
          required: true
          description: the username wanted
          schema:
            $ref: '#/components/schemas/User'
      responses:
        '200':
          description: user found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List-of-User'
        '400': {$ref: '#/components/responses/BadRequest'}
        '401': {$ref: '#/components/responses/Unauthorized'}
        '404': {$ref: '#/components/responses/NotFound'}
        '500': {$ref: '#/components/responses/InternalServerError'}


  /conversations:
    get:
      tags: ["user profile"]
      summary: get all conversations of the user
      description: |
        Retrieve all the conversations the user is in
        both with another user and groups
      operationId: getMyConversations
      responses:
        '200':
          description: chats loaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Homepage'
        '400': {$ref: '#/components/responses/BadRequest'}
        '401': {$ref: '#/components/responses/Unauthorized'}
        '404': {$ref: '#/components/responses/NotFound'}
        '500': {$ref: '#/components/responses/InternalServerError'}

    post:
      tags: ["user action"]
      summary: start a conversation with a user
      description: |
        With a given user, you can start a new conversation with him
        and this will be saved in your home along with the others already
        started
      operationId: startConversation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '201':
          description: Conversation started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '400': {$ref: '#/components/responses/BadRequest'}
        '401': {$ref: '#/components/responses/Unauthorized'}
        '404': {$ref: '#/components/responses/NotFound'}
        '500': {$ref: '#/components/responses/InternalServerError'}

  /conversations/group:
    post:
      tags: ["user action"]
      summary: create a new group
      description: |
        Create a new group with a name and an optional photo,
        the founder can add whoever he likes from all the users in the
        application
      operationId: createGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        '201':
          description: group created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400': {$ref: '#/components/responses/BadRequest'}
        '401': {$ref: '#/components/responses/Unauthorized'}
        '404': {$ref: '#/components/responses/NotFound'}
        '500': {$ref: '#/components/responses/InternalServerError'}

  /conversations/{convID}/:
    parameters:
      - $ref: '#/components/parameters/ConversationID'

    get:
      tags: ["chats"]
      summary: get a conversation with a user or group
      description: |
        Retrieve a conversation with a user or a group
      operationId: getConversation
      responses:
        '200':
          description: chat loaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '400': {$ref: '#/components/responses/BadRequest'}
        '401': {$ref: '#/components/responses/Unauthorized'}
        '404': {$ref: '#/components/responses/NotFound'}
        '500': {$ref: '#/components/responses/InternalServerError'}

  /conversations/{convID}/name:
    parameters:
      - $ref: '#/components/parameters/ConversationID'

    put:
      tags: ["groups"]
      summary: set a new group name
      description: |
        Change the current group name with another one
      operationId: setGroupName
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        '200':
          description: group name changed correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        '400': {$ref: '#/components/responses/BadRequest'}
        '401': {$ref: '#/components/responses/Unauthorized'}
        '404': {$ref: '#/components/responses/NotFound'}
        '500': {$ref: '#/components/responses/InternalServerError'}

  /conversations/{convID}/photo:
    parameters:
      - $ref: '#/components/parameters/ConversationID'

    put:
      tags: ["groups"]
      summary: set a new group photo
      description: |
        Update a new photo for the group
      operationId: setGroupPhoto
      requestBody:
        description: the new group photo
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Group/properties/photo'
        required: true
      responses:
        '200':
          description: new group photo updated correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        '400': {$ref: '#/components/responses/BadRequest'}
        '401': {$ref: '#/components/responses/Unauthorized'}
        '404': {$ref: '#/components/responses/NotFound'}
        '500': {$ref: '#/components/responses/InternalServerError'}

  /conversations/{convID}/members:
    parameters:
      - $ref: '#/components/parameters/ConversationID'

    post:
      tags: ["groups"]
      summary: add a user to a group
      description: |
        Add a member to a group. It can leave anytime
      operationId: addToGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: user added correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        '400': {$ref: '#/components/responses/BadRequest'}
        '401': {$ref: '#/components/responses/Unauthorized'}
        '404': {$ref: '#/components/responses/NotFound'}
        '500': {$ref: '#/components/responses/InternalServerError'}

  /conversations/{convID}/members/{uID}:
    parameters:
      - $ref: '#/components/parameters/ConversationID'
      - $ref: '#/components/parameters/UserID'

    delete:
      tags: ["groups"]
      summary: leave a group
      description: |
        Leave a group you are currently in.
        This will delete also all the messages of the group
      operationId: leaveGroup
      responses:
        '204':
          description: group left correctly
        '400': {$ref: '#/components/responses/BadRequest'}
        '401': {$ref: '#/components/responses/Unauthorized'}
        '404': {$ref: '#/components/responses/NotFound'}
        '500': {$ref: '#/components/responses/InternalServerError'}

  /conversations/{convID}/messages:
    parameters:
      - $ref: '#/components/parameters/ConversationID'

    post:
      tags: ["chats"]
      summary: send a new message
      description: |
        Send a new message in a conversation with a user or a group
      operationId: sendMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Text'
        required: true
      responses:
        '200':
          description: message correctly sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400': {$ref: '#/components/responses/BadRequest'}
        '401': {$ref: '#/components/responses/Unauthorized'}
        '404': {$ref: '#/components/responses/NotFound'}
        '500': {$ref: '#/components/responses/InternalServerError'}

  /conversations/{convID}/messages/{messID}/:
    parameters:
      - $ref: '#/components/parameters/ConversationID'
      - $ref: '#/components/parameters/MessageID'

    post:
      tags: ["chats"]
      summary: forward an existing message to a chat
      description: |
        Take an existing message from a conversation
        and forward it to another one (same one as well)
      operationId: forwardMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Conversation'
        required: true
      responses:
        '200':
          description: message forwarded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400': {$ref: '#/components/responses/BadRequest'}
        '401': {$ref: '#/components/responses/Unauthorized'}
        '404': {$ref: '#/components/responses/NotFound'}
        '500': {$ref: '#/components/responses/InternalServerError'}

    delete:
      tags: ["chats"]
      summary: delete a message in a chat
      description: |
        Delete a message in a conversation.
        Any user can delete any message sent
      operationId: deleteMessage
      responses:
        '204':
          description: message deleted correctly
        '400': {$ref: '#/components/responses/BadRequest'}
        '401': {$ref: '#/components/responses/Unauthorized'}
        '404': {$ref: '#/components/responses/NotFound'}
        '500': {$ref: '#/components/responses/InternalServerError'}


  /conversations/{convID}/messages/{messID}/reactions:
    parameters:
      - $ref: '#/components/parameters/ConversationID'
      - $ref: '#/components/parameters/MessageID'

    put:
      tags: ["chats"]
      summary: react to a message
      description: |
        React to a message sent in a conversation,
        a user can only react one emoji per message
      operationId: commentMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reaction'
      responses:
        '200':
          description: message correctly reacted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reaction'
        '400': {$ref: '#/components/responses/BadRequest'}
        '401': {$ref: '#/components/responses/Unauthorized'}
        '404': {$ref: '#/components/responses/NotFound'}
        '500': {$ref: '#/components/responses/InternalServerError'}

  /conversations/{convID}/messages/{messID}/reactions/{reactID}:
    parameters:
      - $ref: '#/components/parameters/ConversationID'
      - $ref: '#/components/parameters/MessageID'
      - $ref: '#/components/parameters/ReactionID'

    delete:
      tags: ["chats"]
      summary: delete a reaction of a message
      description: |
        Delete a reaction from a message you have put before
      operationId: uncommentMessage
      responses:
        '204':
          description: reaction deleted correctly
        '400': {$ref: '#/components/responses/BadRequest'}
        '401': {$ref: '#/components/responses/Unauthorized'}
        '404': {$ref: '#/components/responses/NotFound'}
        '500': {$ref: '#/components/responses/InternalServerError'}

components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      description: authentication code mode

  responses:
    BadRequest:
      description: The request was not compliant with the documentation (eg. missing fields, etc).

    InternalServerError:
      description: The server encountered an internal error. Further info in server logs.

    Unauthorized:
      description: The access token is missing or it's expired

    NotFound:
      description: Resource not found in the database

  parameters:
    UserID:
      schema:
        type: integer
        example: 1
      name: uID
      in: path
      required: true
      description: ID of the user

    ConversationID:
      schema:
        type: integer
        example: 2
      name: convID
      in: path
      required: true
      description: ID of the conversation

    MessageID:
      schema:
        type: integer
        example: 3
      name: messID
      in: path
      required: true
      description: ID of the message

    ReactionID:
      schema:
        type: integer
        example: 4
      name: reactID
      in: path
      required: true
      description: ID of the reaction

  schemas:
    User:
      description: User schema
      type: object
      properties:
        id:
          type: integer
          example: 10
          readOnly: true
          description: user ID
        username:
          type: string
          example: Diego
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
          description: username
        photo:
          type: string
          format: binary
          minLength: 1
          maxLength: 999
          description: profile photo

    Group:
      description: group schema
      type: object
      properties:
        id:
          type: integer
          example: 11
          readOnly: true
          description: group ID
        name:
          type: string
          example: Class
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
          description: group name
        photo:
          type: string
          format: binary
          minLength: 1
          maxLength: 999
          description: group photo

    Message:
      description: message schema
      type: object
      properties:
        id:
          type: integer
          example: 12
          readOnly: true
          description: message ID
        text:
          $ref: '#/components/schemas/Text'
        timestamp:
          type: string
          format: date-time
          minLength: 1
          maxLength: 999
          description: date and hour of the message
        sender:
          $ref: '#/components/schemas/User'
        photo:
          type: string
          format: binary
          minLength: 1
          maxLength: 999
          description: photo sent
        status:
          type: string
          enum:
            - "Unreceived"
            - "Received"
            - "Read"
          description: status of the message
        reactions:
          type: array
          items:
            $ref: '#/components/schemas/Reaction'
          minItems: 0
          maxItems: 999
          description: reactions ID of the message

    Conversation:
      description: conversation schema
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
          minItems: 1
          maxItems: 999
          description: messages sent

    Homepage:
      description: homepage schema
      type: object
      properties:
        convs:
          type: array
          items:
            $ref: '#/components/schemas/Conversation'
          minItems: 0
          maxItems: 999
          description: conversations started

    Reaction:
      description: reaction schema
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        messageId:
          type: integer
          example: 1234
          description: id of the message reacted
          readOnly: true
        emoji:
          type: string
          example: 😀
          minLength: 1
          maxLength: 4
          pattern: '^[\u1F600-\u1F64F\u1F300-\u1F5FF\u1F680-\u1F6FF\u1F700-\u1F77F\u1F780-\u1F7FF\u1F800-\u1F8FF\u1F900-\u1F9FF\u1FA00-\u1FA6F\u1FA70-\u1FAFF\u2600-\u26FF\u2700-\u27BF\u2300-\u23FF\u2B50\u23F0\u231A\u25AA\u25FE\u2B06\u2194\u2B05\u2195\u21A9\u21AA\u2753\u2754\u2755\u274C\u274E\u2B06\u2199]$'
          description: reacted emoji

    List-of-User:
      description: List of users schema
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
          minItems: 0
          maxItems: 999
          description: users found

    Photo:
      description: Photo schema
      type: object
      properties:
        file:
          type: string
          format: binary

    Text:
      description: message text
      type: object
      properties:
        text:
          type: string
          example: This is a message!
          pattern: '^.*?$'
          minLength: 1
          maxLength: 255

    Notification:
      description: notification sent to the user
      type: object
      properties:
        report:
          type: string
          pattern: '^.*?$'
          minLength: 1
          maxLength: 250
          example: "Resource updated successfully"
          description: notify user of the operation result